// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetGUICodedUITestCases
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Added content to cells and testing evaluation button
        /// </summary>
        public void Adding1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIBoxCellContentEdit = this.UISpreadsheetWindow.UIBoxCellContentWindow.UIBoxCellContentEdit;
            WinButton uIEvaluateButton = this.UISpreadsheetWindow.UIEvaluateWindow.UIEvaluateButton;
            WinWindow uIBoxCellContentWindow = this.UISpreadsheetWindow.UISpreadsheetClient.UIBoxCellContentWindow;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.Adding1Params.ExePath, this.Adding1Params.AlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(227, 102));

            // Type '10' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.Adding1Params.UIBoxCellContentEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(310, 104));

            // Type '=A5+B2' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.Adding1Params.UIBoxCellContentEditText1;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(39, 17));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(211, 102));

            // Click 'BoxCellContent' window
            Mouse.Click(uIBoxCellContentWindow, new Point(31, 1));

            // Type '10+20' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.Adding1Params.UIBoxCellContentEditText2;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(29, 10));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(395, 99));

            // Type 'Hello' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.Adding1Params.UIBoxCellContentEditText3;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(18, 19));
        }
        
        /// <summary>
        /// More complicated functionality is tested
        /// </summary>
        public void Adding2()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIBoxCellContentEdit = this.UISpreadsheetWindow.UIBoxCellContentWindow.UIBoxCellContentEdit;
            WinButton uIEvaluateButton = this.UISpreadsheetWindow.UIEvaluateWindow.UIEvaluateButton;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.Adding2Params.UISpreadsheetWindowExePath, this.Adding2Params.UISpreadsheetWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(73, 42));

            // Type '=B2+10' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.Adding2Params.UIBoxCellContentEditText;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(78, 10));

            // Move 'spreadsheetPanel1' client
            Mouse.StartDragging(uISpreadsheetPanel1Client, new Point(158, 35));
            Mouse.StopDragging(uISpreadsheetPanel1Client, 6, 27);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(163, 62));

            // Type '10' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.Adding2Params.UIBoxCellContentEditText1;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(64, 15));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(245, 83));

            // Type '55' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.Adding2Params.UIBoxCellContentEditText2;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(36, 0));
        }
        
        /// <summary>
        /// Filling 3 different cells with values and creating a formula in a forth cell that performs arithmetic using the 3 cells
        /// </summary>
        public void Adding3()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIBoxCellContentEdit = this.UISpreadsheetWindow.UIBoxCellContentWindow.UIBoxCellContentEdit;
            WinButton uIEvaluateButton = this.UISpreadsheetWindow.UIEvaluateWindow.UIEvaluateButton;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.Adding3Params.UISpreadsheetWindowExePath, this.Adding3Params.UISpreadsheetWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(71, 44));

            // Type '5' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.Adding3Params.UIBoxCellContentEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(152, 39));

            // Type '5' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.Adding3Params.UIBoxCellContentEditText1;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(56, 15));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(220, 38));

            // Type '10' in 'Evaluate' button
            Keyboard.SendKeys(uIEvaluateButton, this.Adding3Params.UIEvaluateButtonSendKeys, ModifierKeys.None);

            // Type '10' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.Adding3Params.UIBoxCellContentEditText2;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(74, 10));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(298, 34));

            // Type '20' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.Adding3Params.UIBoxCellContentEditText3;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(52, 7));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(374, 38));

            // Type '=B1+C1+D1' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.Adding3Params.UIBoxCellContentEditText4;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(35, 17));
        }
        
        /// <summary>
        /// Adding 5 different elements that are all used in another cells function
        /// </summary>
        public void Adding4()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinWindow uIBoxCellContentWindow = this.UISpreadsheetWindow.UISpreadsheetClient.UIBoxCellContentWindow;
            WinEdit uIBoxCellContentEdit = this.UISpreadsheetWindow.UIBoxCellContentWindow.UIBoxCellContentEdit;
            WinButton uIEvaluateButton = this.UISpreadsheetWindow.UIEvaluateWindow.UIEvaluateButton;
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinButton uINOButton = this.UIWarningWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(60, 35));

            // Click 'BoxCellContent' window
            Mouse.Click(uIBoxCellContentWindow, new Point(60, 18));

            // Type '5' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.Adding4Params.UIBoxCellContentEditText;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(70, 7));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(138, 45));

            // Type '1' in 'Evaluate' button
            Keyboard.SendKeys(uIEvaluateButton, this.Adding4Params.UIEvaluateButtonSendKeys, ModifierKeys.None);

            // Type '15' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.Adding4Params.UIBoxCellContentEditText1;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(45, 11));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(245, 38));

            // Type '25' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.Adding4Params.UIBoxCellContentEditText2;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(40, 16));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(307, 43));

            // Type '3' in 'Evaluate' button
            Keyboard.SendKeys(uIEvaluateButton, this.Adding4Params.UIEvaluateButtonSendKeys1, ModifierKeys.None);

            // Type '35' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.Adding4Params.UIBoxCellContentEditText3;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(59, 11));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(382, 37));

            // Type '20' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.Adding4Params.UIBoxCellContentEditText4;

            // Type '{Enter}' in 'BoxCellContent' text box
            Keyboard.SendKeys(uIBoxCellContentEdit, this.Adding4Params.UIBoxCellContentEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(479, 37));

            // Type '=A1+B1+C1+D1+E1' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.Adding4Params.UIBoxCellContentEditText5;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(44, 11));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(28, 8));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(46, 17));
        }
        
        /// <summary>
        /// Again multiple cell elements were added
        /// </summary>
        public void Adding5()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIBoxCellContentEdit = this.UISpreadsheetWindow.UIBoxCellContentWindow.UIBoxCellContentEdit;
            WinButton uIEvaluateButton = this.UISpreadsheetWindow.UIEvaluateWindow.UIEvaluateButton;
            WinWindow uIBoxCellContentWindow = this.UISpreadsheetWindow.UISpreadsheetClient.UIBoxCellContentWindow;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.Adding5Params.ExePath, this.Adding5Params.AlternateExePath);

            // Double-Click 'spreadsheetPanel1' client
            Mouse.DoubleClick(uISpreadsheetPanel1Client, new Point(228, 99));

            // Type '55' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.Adding5Params.UIBoxCellContentEditText;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(50, 14));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(325, 97));

            // Type '=55' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.Adding5Params.UIBoxCellContentEditText1;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(50, 18));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(384, 103));

            // Type '66' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.Adding5Params.UIBoxCellContentEditText2;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(29, 13));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(491, 103));

            // Type '=A2+B2' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.Adding5Params.UIBoxCellContentEditText3;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(81, 9));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(548, 94));

            // Click 'BoxCellContent' window
            Mouse.Click(uIBoxCellContentWindow, new Point(123, 1));

            // Type 'Hello' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.Adding5Params.UIBoxCellContentEditText4;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(37, 16));
        }
        
        /// <summary>
        /// Testing the closing functionality
        /// </summary>
        public void Closing1()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.Closing1Params.UISpreadsheetWindowExePath, this.Closing1Params.UISpreadsheetWindowAlternateExePath);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(30, 13));
        }
        
        /// <summary>
        /// Closing2 - Use 'Closing2Params' to pass parameters into this method.
        /// </summary>
        public void Closing2()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uINewMenuItem1 = this.UISpreadsheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uINewMenuItem2 = this.UISpreadsheetWindow2.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uINewMenuItem3 = this.UISpreadsheetWindow3.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinButton uICloseButton1 = this.UISpreadsheetWindow1.UISpreadsheetTitleBar.UICloseButton;
            WinButton uICloseButton2 = this.UISpreadsheetWindow2.UISpreadsheetTitleBar.UICloseButton;
            WinButton uICloseButton3 = this.UISpreadsheetWindow3.UISpreadsheetTitleBar.UICloseButton;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.Closing2Params.UISpreadsheetWindowExePath, this.Closing2Params.UISpreadsheetWindowAlternateExePath);

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(50, 19));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem1, new Point(34, 9));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem2, new Point(33, 8));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem3, new Point(43, 12));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(29, 8));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(23, 7));

            // Click 'Close' button
            Mouse.Click(uICloseButton2, new Point(12, 3));

            // Click 'Close' button
            Mouse.Click(uICloseButton3, new Point(17, 7));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(13, 5));
        }
        
        /// <summary>
        /// Testing the create new window tests multiple times
        /// </summary>
        public void NewWindowTest()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uINewMenuItem1 = this.UISpreadsheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uINewMenuItem2 = this.UISpreadsheetWindow2.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinTitleBar uISpreadsheetTitleBar = this.UISpreadsheetWindow.UISpreadsheetTitleBar;
            WinEdit uIBoxCellContentEdit = this.UISpreadsheetWindow.UIBoxCellContentWindow.UIBoxCellContentEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinButton uIEvaluateButton = this.UISpreadsheetWindow.UIEvaluateWindow.UIEvaluateButton;
            WinButton uICloseButton = this.UISpreadsheetWindow3.UISpreadsheetTitleBar.UICloseButton;
            WinButton uICloseButton1 = this.UISpreadsheetWindow2.UISpreadsheetTitleBar.UICloseButton;
            WinButton uICloseButton2 = this.UISpreadsheetWindow1.UISpreadsheetTitleBar.UICloseButton;
            WinButton uICloseButton3 = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinButton uINOButton = this.UIWarningWindow.UINOWindow.UINOButton;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.NewWindowTestParams.UISpreadsheetWindowExePath, this.NewWindowTestParams.UISpreadsheetWindowAlternateExePath);

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(14, 9));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem1, new Point(23, 8));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem2, new Point(18, 7));

            // Click 'Spreadsheet' title bar
            Mouse.Click(uISpreadsheetTitleBar, new Point(110, 14));

            // Move 'BoxCellContent' text box to 'spreadsheetPanel1' client
            uISpreadsheetPanel1Client.EnsureClickable(new Point(209, 83));
            Mouse.StartDragging(uIBoxCellContentEdit, new Point(19, 4));
            Mouse.StopDragging(uISpreadsheetPanel1Client, new Point(209, 83));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(210, 96));

            // Type '10' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.NewWindowTestParams.UIBoxCellContentEditText;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(82, 2));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(39, 12));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(36, 8));

            // Click 'Close' button
            Mouse.Click(uICloseButton2, new Point(31, 4));

            // Click 'Close' button
            Mouse.Click(uICloseButton3, new Point(28, 11));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(50, 11));
        }
        
        /// <summary>
        /// Testing multiple new window and closing functionality
        /// </summary>
        public void NewWindowTest2()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uINewMenuItem1 = this.UISpreadsheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinButton uICloseButton = this.UISpreadsheetWindow2.UISpreadsheetTitleBar.UICloseButton;
            WinButton uICloseButton1 = this.UISpreadsheetWindow1.UISpreadsheetTitleBar.UICloseButton;
            WinButton uICloseButton2 = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.NewWindowTest2Params.UISpreadsheetWindowExePath, this.NewWindowTest2Params.UISpreadsheetWindowAlternateExePath);

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(21, 10));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem1, new Point(24, 5));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(26, 7));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(38, 14));

            // Click 'Close' button
            Mouse.Click(uICloseButton2, new Point(40, 14));
        }
        
        /// <summary>
        /// Testing if the help window pops up using Coded UI
        /// </summary>
        public void HelpWindowTest()
        {
            #region Variable Declarations
            WinMenuItem uIHelpMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIHelpMenuItem;
            WinButton uIOKButton = this.UIHelpWindow.UIOKWindow.UIOKButton;
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.HelpWindowTestParams.UISpreadsheetWindowExePath, this.HelpWindowTestParams.UISpreadsheetWindowAlternateExePath);

            // Click 'File' -> 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(70, 17));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(23, 1));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(32, 12));
        }
        
        /// <summary>
        /// Testing the open from file functionality
        /// </summary>
        public void OpenFromFileTest()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinTreeItem uIDesktopTreeItem = this.UIItem0penWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIDesktopTreeItem;
            WinListItem uIBlaListItem = this.UIItem0penWindow.UIItemWindow.UIItemsViewList.UIBlaListItem;
            WinButton uIOpenButton = this.UIItem0penWindow.UIOpenWindow.UIOpenButton;
            WinMenuItem uINewMenuItem = this.UICUsersAliMomeniDesktWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uIOpenMenuItem1 = this.UICUsersAliMomeniDesktWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uITypeEdit = this.UIItem0penWindow.UIItemWindow.UIBBListItem.UITypeEdit;
            WinButton uICloseButton = this.UICUsersAliMomeniDesktWindow1.UICUsersAliMomeniDesktTitleBar.UICloseButton;
            WinButton uICloseButton1 = this.UICUsersAliMomeniDesktWindow.UICUsersAliMomeniDesktTitleBar.UICloseButton;
            WinButton uICloseButton2 = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinEdit uISizeEdit = this.UIItem0penWindow.UIItemWindow.UIBBListItem.UISizeEdit;
            WinClient uISpreadsheetPanel1Client = this.UICUsersAliMomeniDesktWindow1.UIItemWindow.UISpreadsheetPanel1Client;
            WinList uIItemList = this.UIItemWindow.UIFolderViewWindow.UIItemList;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.OpenFromFileTestParams.UISpreadsheetWindowExePath, this.OpenFromFileTestParams.UISpreadsheetWindowAlternateExePath);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(55, 8));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(35, 11));

            // Click 'Bla' list item
            Mouse.Click(uIBlaListItem, new Point(49, 22));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(50, 13));

            // Move 'File' -> 'New' menu item to 'File' -> 'Open' menu item
            uIOpenMenuItem1.EnsureClickable(new Point(39, 7));
            Mouse.StartDragging(uINewMenuItem, new Point(36, 8));
            Mouse.StopDragging(uIOpenMenuItem1, new Point(39, 7));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(19, 14));

            // Double-Click 'Type' text box
            Mouse.DoubleClick(uITypeEdit, new Point(36, 9));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(35, 15));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(33, 9));

            // Click 'Close' button
            Mouse.Click(uICloseButton2, new Point(22, 1));

            // Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow1 = ApplicationUnderTest.Launch(this.OpenFromFileTestParams.UISpreadsheetWindowExePath1, this.OpenFromFileTestParams.UISpreadsheetWindowAlternateExePath1);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(50, 13));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(34, 10));

            // Double-Click 'Size' text box
            Mouse.DoubleClick(uISizeEdit, new Point(9, 1));

            // Move 'spreadsheetPanel1' client to list box
            uIItemList.EnsureClickable(new Point(1132, 130));
            Mouse.StartDragging(uISpreadsheetPanel1Client, new Point(218, 108));
            Mouse.StopDragging(uIItemList, new Point(1132, 130));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(38, 15));

            // Click 'Close' button
            Mouse.Click(uICloseButton2, new Point(7, 10));
        }
        
        /// <summary>
        /// Testing if the circular dependency pop up, pops up
        /// </summary>
        public void CircularDependencyPopUpTest()
        {
            #region Variable Declarations
            WinEdit uIBoxCellContentEdit = this.UISpreadsheetWindow.UIBoxCellContentWindow.UIBoxCellContentEdit;
            WinButton uIEvaluateButton = this.UISpreadsheetWindow.UIEvaluateWindow.UIEvaluateButton;
            WinButton uIOKButton = this.UIAnErroroccuredbecausWindow.UIOKWindow.UIOKButton;
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinButton uINOButton = this.UIWarningWindow.UINOWindow.UINOButton;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.CircularDependencyPopUpTestParams.UISpreadsheetWindowExePath, this.CircularDependencyPopUpTestParams.UISpreadsheetWindowAlternateExePath);

            // Type '=C4' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.CircularDependencyPopUpTestParams.UIBoxCellContentEditText;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(34, 16));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(41, 16));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(25, 6));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(40, 18));
        }
        
        /// <summary>
        /// Creating a test that causes a formula error
        /// </summary>
        public void TestingFormulaError()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinButton uIEvaluateButton = this.UISpreadsheetWindow.UIEvaluateWindow.UIEvaluateButton;
            WinEdit uIBoxCellContentEdit = this.UISpreadsheetWindow.UIBoxCellContentWindow.UIBoxCellContentEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(239, 43));

            // Type '55' in 'Evaluate' button
            Keyboard.SendKeys(uIEvaluateButton, this.TestingFormulaErrorParams.UIEvaluateButtonSendKeys, ModifierKeys.None);

            // Type '201' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.TestingFormulaErrorParams.UIBoxCellContentEditText;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(36, 12));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(306, 40));

            // Type '=A1+C1' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.TestingFormulaErrorParams.UIBoxCellContentEditText1;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(60, 7));
        }
        
        /// <summary>
        /// Testing addition of 5 cells with an assertion
        /// </summary>
        public void TestingAdding()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinWindow uIBoxCellContentWindow = this.UISpreadsheetWindow.UISpreadsheetClient.UIBoxCellContentWindow;
            WinEdit uIBoxCellContentEdit = this.UISpreadsheetWindow.UIBoxCellContentWindow.UIBoxCellContentEdit;
            WinMenuBar uIMenuStrip1MenuBar = this.UISpreadsheetWindow.UIMenuStrip1Window.UIMenuStrip1MenuBar;
            WinButton uIEvaluateButton = this.UISpreadsheetWindow.UIEvaluateWindow.UIEvaluateButton;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.TestingAddingParams.UISpreadsheetWindowExePath, this.TestingAddingParams.UISpreadsheetWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(83, 41));

            // Click 'BoxCellContent' window
            Mouse.Click(uIBoxCellContentWindow, new Point(13, 1));

            // Type '10' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.TestingAddingParams.UIBoxCellContentEditText;

            // Move 'menuStrip1' menu bar
            Mouse.StartDragging(uIMenuStrip1MenuBar, new Point(535, 10));
            Mouse.StopDragging(uIMenuStrip1MenuBar, 2, 9);

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(21, 8));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(156, 35));

            // Type '20' in 'Evaluate' button
            Keyboard.SendKeys(uIEvaluateButton, this.TestingAddingParams.UIEvaluateButtonSendKeys, ModifierKeys.None);

            // Type '20' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.TestingAddingParams.UIBoxCellContentEditText1;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(65, 14));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(236, 42));

            // Type '30' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.TestingAddingParams.UIBoxCellContentEditText2;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(47, 12));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(304, 33));

            // Type '40' in 'Evaluate' button
            Keyboard.SendKeys(uIEvaluateButton, this.TestingAddingParams.UIEvaluateButtonSendKeys1, ModifierKeys.None);

            // Type '40' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.TestingAddingParams.UIBoxCellContentEditText3;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(53, 13));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(377, 46));

            // Type '=A1+B1+C1+D1' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.TestingAddingParams.UIBoxCellContentEditText4;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(40, 6));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uIBoxCellValueEdit = this.UISpreadsheetWindow.UIBoxCellValueWindow.UIBoxCellValueEdit;
            #endregion

            // Verify that the 'ControlType' property of 'BoxCellValue' text box equals '100'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIBoxCellValueEditControlType, uIBoxCellValueEdit.ControlType.ToString());
        }
        
        /// <summary>
        /// Testing if the save method works properly
        /// </summary>
        public void TestingSaveMethod()
        {
            #region Variable Declarations
            WinMenuItem uIFileMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinWindow uIBoxCellContentWindow = this.UISpreadsheetWindow.UISpreadsheetClient.UIBoxCellContentWindow;
            WinEdit uIBoxCellContentEdit = this.UISpreadsheetWindow.UIBoxCellContentWindow.UIBoxCellContentEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinMenuItem uISaveMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveWindow.UISaveWindow1.UISaveButton;
            WinButton uINOButton = this.UISaveWindow1.UISavePane.UINOButton;
            WinTreeItem uIDesktopTreeItem = this.UISaveWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIDesktopTreeItem;
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.TestingSaveMethodParams.UISpreadsheetWindowExePath, this.TestingSaveMethodParams.UISpreadsheetWindowAlternateExePath);

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(4, 10));

            // Click 'BoxCellContent' window
            Mouse.Click(uIBoxCellContentWindow, new Point(11, 19));

            // Click 'BoxCellContent' text box
            Mouse.Click(uIBoxCellContentEdit, new Point(9, 7));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(226, 97));

            // Type '55' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.TestingSaveMethodParams.UIBoxCellContentEditText;

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(73, 11));

            // Select 'b' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.TestingSaveMethodParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(15, 5));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(33, 8));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(16, 11));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(15, 8));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(27, 1));
        }
        
        /// <summary>
        /// Testing circular Dependency with multiple cell relations
        /// </summary>
        public void TestingCircularDependency()
        {
            #region Variable Declarations
            WinMenuItem uIFileMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIBoxCellContentEdit = this.UISpreadsheetWindow.UIBoxCellContentWindow.UIBoxCellContentEdit;
            WinButton uIEvaluateButton = this.UISpreadsheetWindow.UIEvaluateWindow.UIEvaluateButton;
            WinButton uIOKButton = this.UIAnErroroccuredbecausWindow.UIOKWindow.UIOKButton;
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinButton uINOButton = this.UIWarningWindow.UINOWindow.UINOButton;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.TestingCircularDependencyParams.UISpreadsheetWindowExePath, this.TestingCircularDependencyParams.UISpreadsheetWindowAlternateExePath);

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(18, 11));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(241, 91));

            // Type '=A4' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.TestingCircularDependencyParams.UIBoxCellContentEditText;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(82, 15));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(165, 102));

            // Type '=C4' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.TestingCircularDependencyParams.UIBoxCellContentEditText1;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(35, 11));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(47, 98));

            // Type '=B4' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.TestingCircularDependencyParams.UIBoxCellContentEditText2;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(42, 15));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(34, 10));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(35, 11));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(38, 19));
        }
        
        /// <summary>
        /// Testing if the values change if multiple cells are dependent on one anthor
        /// </summary>
        public void TestingValueChange()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIBoxCellContentEdit = this.UISpreadsheetWindow.UIBoxCellContentWindow.UIBoxCellContentEdit;
            WinButton uIEvaluateButton = this.UISpreadsheetWindow.UIEvaluateWindow.UIEvaluateButton;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.TestingValueChangeParams.UISpreadsheetWindowExePath, this.TestingValueChangeParams.UISpreadsheetWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(53, 49));

            // Type '=c5' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.TestingValueChangeParams.UIBoxCellContentEditText;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(73, 12));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(221, 126));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(221, 126));

            // Type '=F5' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.TestingValueChangeParams.UIBoxCellContentEditText1;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(36, 13));

            // Double-Click 'spreadsheetPanel1' client
            Mouse.DoubleClick(uISpreadsheetPanel1Client, new Point(484, 122));

            // Type '5' in 'BoxCellContent' text box
            uIBoxCellContentEdit.Text = this.TestingValueChangeParams.UIBoxCellContentEditText2;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(35, 12));
        }
        
        /// <summary>
        /// Test if the value after multiple cells are depedent on each other values has the correct end value
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinEdit uIBoxCellValueEdit = this.UISpreadsheetWindow.UIBoxCellValueWindow.UIBoxCellValueEdit;
            #endregion

            // Verify that the 'ControlType' property of 'BoxCellValue' text box equals '5'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIBoxCellValueEditControlType, uIBoxCellValueEdit.ControlType.ToString());
        }
        
        #region Properties
        public virtual Adding1Params Adding1Params
        {
            get
            {
                if ((this.mAdding1Params == null))
                {
                    this.mAdding1Params = new Adding1Params();
                }
                return this.mAdding1Params;
            }
        }
        
        public virtual Adding2Params Adding2Params
        {
            get
            {
                if ((this.mAdding2Params == null))
                {
                    this.mAdding2Params = new Adding2Params();
                }
                return this.mAdding2Params;
            }
        }
        
        public virtual Adding3Params Adding3Params
        {
            get
            {
                if ((this.mAdding3Params == null))
                {
                    this.mAdding3Params = new Adding3Params();
                }
                return this.mAdding3Params;
            }
        }
        
        public virtual Adding4Params Adding4Params
        {
            get
            {
                if ((this.mAdding4Params == null))
                {
                    this.mAdding4Params = new Adding4Params();
                }
                return this.mAdding4Params;
            }
        }
        
        public virtual Adding5Params Adding5Params
        {
            get
            {
                if ((this.mAdding5Params == null))
                {
                    this.mAdding5Params = new Adding5Params();
                }
                return this.mAdding5Params;
            }
        }
        
        public virtual Closing1Params Closing1Params
        {
            get
            {
                if ((this.mClosing1Params == null))
                {
                    this.mClosing1Params = new Closing1Params();
                }
                return this.mClosing1Params;
            }
        }
        
        public virtual Closing2Params Closing2Params
        {
            get
            {
                if ((this.mClosing2Params == null))
                {
                    this.mClosing2Params = new Closing2Params();
                }
                return this.mClosing2Params;
            }
        }
        
        public virtual NewWindowTestParams NewWindowTestParams
        {
            get
            {
                if ((this.mNewWindowTestParams == null))
                {
                    this.mNewWindowTestParams = new NewWindowTestParams();
                }
                return this.mNewWindowTestParams;
            }
        }
        
        public virtual NewWindowTest2Params NewWindowTest2Params
        {
            get
            {
                if ((this.mNewWindowTest2Params == null))
                {
                    this.mNewWindowTest2Params = new NewWindowTest2Params();
                }
                return this.mNewWindowTest2Params;
            }
        }
        
        public virtual HelpWindowTestParams HelpWindowTestParams
        {
            get
            {
                if ((this.mHelpWindowTestParams == null))
                {
                    this.mHelpWindowTestParams = new HelpWindowTestParams();
                }
                return this.mHelpWindowTestParams;
            }
        }
        
        public virtual OpenFromFileTestParams OpenFromFileTestParams
        {
            get
            {
                if ((this.mOpenFromFileTestParams == null))
                {
                    this.mOpenFromFileTestParams = new OpenFromFileTestParams();
                }
                return this.mOpenFromFileTestParams;
            }
        }
        
        public virtual CircularDependencyPopUpTestParams CircularDependencyPopUpTestParams
        {
            get
            {
                if ((this.mCircularDependencyPopUpTestParams == null))
                {
                    this.mCircularDependencyPopUpTestParams = new CircularDependencyPopUpTestParams();
                }
                return this.mCircularDependencyPopUpTestParams;
            }
        }
        
        public virtual TestingFormulaErrorParams TestingFormulaErrorParams
        {
            get
            {
                if ((this.mTestingFormulaErrorParams == null))
                {
                    this.mTestingFormulaErrorParams = new TestingFormulaErrorParams();
                }
                return this.mTestingFormulaErrorParams;
            }
        }
        
        public virtual TestingAddingParams TestingAddingParams
        {
            get
            {
                if ((this.mTestingAddingParams == null))
                {
                    this.mTestingAddingParams = new TestingAddingParams();
                }
                return this.mTestingAddingParams;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual TestingSaveMethodParams TestingSaveMethodParams
        {
            get
            {
                if ((this.mTestingSaveMethodParams == null))
                {
                    this.mTestingSaveMethodParams = new TestingSaveMethodParams();
                }
                return this.mTestingSaveMethodParams;
            }
        }
        
        public virtual TestingCircularDependencyParams TestingCircularDependencyParams
        {
            get
            {
                if ((this.mTestingCircularDependencyParams == null))
                {
                    this.mTestingCircularDependencyParams = new TestingCircularDependencyParams();
                }
                return this.mTestingCircularDependencyParams;
            }
        }
        
        public virtual TestingValueChangeParams TestingValueChangeParams
        {
            get
            {
                if ((this.mTestingValueChangeParams == null))
                {
                    this.mTestingValueChangeParams = new TestingValueChangeParams();
                }
                return this.mTestingValueChangeParams;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public UISpreadsheetWindow UISpreadsheetWindow
        {
            get
            {
                if ((this.mUISpreadsheetWindow == null))
                {
                    this.mUISpreadsheetWindow = new UISpreadsheetWindow();
                }
                return this.mUISpreadsheetWindow;
            }
        }
        
        public UIWarningWindow UIWarningWindow
        {
            get
            {
                if ((this.mUIWarningWindow == null))
                {
                    this.mUIWarningWindow = new UIWarningWindow();
                }
                return this.mUIWarningWindow;
            }
        }
        
        public UISpreadsheetWindow1 UISpreadsheetWindow1
        {
            get
            {
                if ((this.mUISpreadsheetWindow1 == null))
                {
                    this.mUISpreadsheetWindow1 = new UISpreadsheetWindow1();
                }
                return this.mUISpreadsheetWindow1;
            }
        }
        
        public UISpreadsheetWindow2 UISpreadsheetWindow2
        {
            get
            {
                if ((this.mUISpreadsheetWindow2 == null))
                {
                    this.mUISpreadsheetWindow2 = new UISpreadsheetWindow2();
                }
                return this.mUISpreadsheetWindow2;
            }
        }
        
        public UISpreadsheetWindow3 UISpreadsheetWindow3
        {
            get
            {
                if ((this.mUISpreadsheetWindow3 == null))
                {
                    this.mUISpreadsheetWindow3 = new UISpreadsheetWindow3();
                }
                return this.mUISpreadsheetWindow3;
            }
        }
        
        public UIHelpWindow UIHelpWindow
        {
            get
            {
                if ((this.mUIHelpWindow == null))
                {
                    this.mUIHelpWindow = new UIHelpWindow();
                }
                return this.mUIHelpWindow;
            }
        }
        
        public UIItem0penWindow UIItem0penWindow
        {
            get
            {
                if ((this.mUIItem0penWindow == null))
                {
                    this.mUIItem0penWindow = new UIItem0penWindow();
                }
                return this.mUIItem0penWindow;
            }
        }
        
        public UICUsersAliMomeniDesktWindow UICUsersAliMomeniDesktWindow
        {
            get
            {
                if ((this.mUICUsersAliMomeniDesktWindow == null))
                {
                    this.mUICUsersAliMomeniDesktWindow = new UICUsersAliMomeniDesktWindow();
                }
                return this.mUICUsersAliMomeniDesktWindow;
            }
        }
        
        public UICUsersAliMomeniDesktWindow1 UICUsersAliMomeniDesktWindow1
        {
            get
            {
                if ((this.mUICUsersAliMomeniDesktWindow1 == null))
                {
                    this.mUICUsersAliMomeniDesktWindow1 = new UICUsersAliMomeniDesktWindow1();
                }
                return this.mUICUsersAliMomeniDesktWindow1;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIAnErroroccuredbecausWindow UIAnErroroccuredbecausWindow
        {
            get
            {
                if ((this.mUIAnErroroccuredbecausWindow == null))
                {
                    this.mUIAnErroroccuredbecausWindow = new UIAnErroroccuredbecausWindow();
                }
                return this.mUIAnErroroccuredbecausWindow;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow();
                }
                return this.mUISaveWindow;
            }
        }
        
        public UISaveWindow11 UISaveWindow1
        {
            get
            {
                if ((this.mUISaveWindow1 == null))
                {
                    this.mUISaveWindow1 = new UISaveWindow11();
                }
                return this.mUISaveWindow1;
            }
        }
        #endregion
        
        #region Fields
        private Adding1Params mAdding1Params;
        
        private Adding2Params mAdding2Params;
        
        private Adding3Params mAdding3Params;
        
        private Adding4Params mAdding4Params;
        
        private Adding5Params mAdding5Params;
        
        private Closing1Params mClosing1Params;
        
        private Closing2Params mClosing2Params;
        
        private NewWindowTestParams mNewWindowTestParams;
        
        private NewWindowTest2Params mNewWindowTest2Params;
        
        private HelpWindowTestParams mHelpWindowTestParams;
        
        private OpenFromFileTestParams mOpenFromFileTestParams;
        
        private CircularDependencyPopUpTestParams mCircularDependencyPopUpTestParams;
        
        private TestingFormulaErrorParams mTestingFormulaErrorParams;
        
        private TestingAddingParams mTestingAddingParams;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private TestingSaveMethodParams mTestingSaveMethodParams;
        
        private TestingCircularDependencyParams mTestingCircularDependencyParams;
        
        private TestingValueChangeParams mTestingValueChangeParams;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private UISpreadsheetWindow mUISpreadsheetWindow;
        
        private UIWarningWindow mUIWarningWindow;
        
        private UISpreadsheetWindow1 mUISpreadsheetWindow1;
        
        private UISpreadsheetWindow2 mUISpreadsheetWindow2;
        
        private UISpreadsheetWindow3 mUISpreadsheetWindow3;
        
        private UIHelpWindow mUIHelpWindow;
        
        private UIItem0penWindow mUIItem0penWindow;
        
        private UICUsersAliMomeniDesktWindow mUICUsersAliMomeniDesktWindow;
        
        private UICUsersAliMomeniDesktWindow1 mUICUsersAliMomeniDesktWindow1;
        
        private UIItemWindow3 mUIItemWindow;
        
        private UIAnErroroccuredbecausWindow mUIAnErroroccuredbecausWindow;
        
        private UISaveWindow mUISaveWindow;
        
        private UISaveWindow11 mUISaveWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Adding1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class Adding1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\Ali Momeni\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spr" +
            "eadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spreadshe" +
            "etGUI.exe";
        
        /// <summary>
        /// Type '10' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText = "10";
        
        /// <summary>
        /// Type '=A5+B2' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText1 = "=A5+B2";
        
        /// <summary>
        /// Type '10+20' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText2 = "10+20";
        
        /// <summary>
        /// Type 'Hello' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText3 = "Hello";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Adding2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class Adding2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Ali Momeni\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spr" +
            "eadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spreadshe" +
            "etGUI.exe";
        
        /// <summary>
        /// Type '=B2+10' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText = "=B2+10";
        
        /// <summary>
        /// Type '10' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText1 = "10";
        
        /// <summary>
        /// Type '55' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText2 = "55";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Adding3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class Adding3Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Ali Momeni\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spr" +
            "eadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spreadshe" +
            "etGUI.exe";
        
        /// <summary>
        /// Type '5' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText = "5";
        
        /// <summary>
        /// Type '5' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText1 = "5";
        
        /// <summary>
        /// Type '10' in 'Evaluate' button
        /// </summary>
        public string UIEvaluateButtonSendKeys = "10";
        
        /// <summary>
        /// Type '10' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText2 = "10";
        
        /// <summary>
        /// Type '20' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText3 = "20";
        
        /// <summary>
        /// Type '=B1+C1+D1' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText4 = "=B1+C1+D1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Adding4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class Adding4Params
    {
        
        #region Fields
        /// <summary>
        /// Type '5' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText = "5";
        
        /// <summary>
        /// Type '1' in 'Evaluate' button
        /// </summary>
        public string UIEvaluateButtonSendKeys = "1";
        
        /// <summary>
        /// Type '15' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText1 = "15";
        
        /// <summary>
        /// Type '25' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText2 = "25";
        
        /// <summary>
        /// Type '3' in 'Evaluate' button
        /// </summary>
        public string UIEvaluateButtonSendKeys1 = "3";
        
        /// <summary>
        /// Type '35' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText3 = "35";
        
        /// <summary>
        /// Type '20' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText4 = "20";
        
        /// <summary>
        /// Type '{Enter}' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=A1+B1+C1+D1+E1' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText5 = "=A1+B1+C1+D1+E1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Adding5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class Adding5Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\Ali Momeni\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spr" +
            "eadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spreadshe" +
            "etGUI.exe";
        
        /// <summary>
        /// Type '55' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText = "55";
        
        /// <summary>
        /// Type '=55' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText1 = "=55";
        
        /// <summary>
        /// Type '66' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText2 = "66";
        
        /// <summary>
        /// Type '=A2+B2' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText3 = "=A2+B2";
        
        /// <summary>
        /// Type 'Hello' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText4 = "Hello";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Closing1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class Closing1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Ali Momeni\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spr" +
            "eadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spreadshe" +
            "etGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Closing2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class Closing2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Ali Momeni\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spr" +
            "eadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spreadshe" +
            "etGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NewWindowTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class NewWindowTestParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Ali Momeni\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spr" +
            "eadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spreadshe" +
            "etGUI.exe";
        
        /// <summary>
        /// Type '10' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText = "10";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NewWindowTest2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class NewWindowTest2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Ali Momeni\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spr" +
            "eadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spreadshe" +
            "etGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HelpWindowTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class HelpWindowTestParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Ali Momeni\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spr" +
            "eadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spreadshe" +
            "etGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenFromFileTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class OpenFromFileTestParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Ali Momeni\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spr" +
            "eadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spreadshe" +
            "etGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath1 = "C:\\Users\\Ali Momeni\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spr" +
            "eadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath1 = "%USERPROFILE%\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spreadshe" +
            "etGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CircularDependencyPopUpTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class CircularDependencyPopUpTestParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Ali Momeni\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spr" +
            "eadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spreadshe" +
            "etGUI.exe";
        
        /// <summary>
        /// Type '=C4' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText = "=C4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestingFormulaError'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class TestingFormulaErrorParams
    {
        
        #region Fields
        /// <summary>
        /// Type '55' in 'Evaluate' button
        /// </summary>
        public string UIEvaluateButtonSendKeys = "55";
        
        /// <summary>
        /// Type '201' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText = "201";
        
        /// <summary>
        /// Type '=A1+C1' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText1 = "=A1+C1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestingAdding'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class TestingAddingParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Ali Momeni\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spr" +
            "eadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spreadshe" +
            "etGUI.exe";
        
        /// <summary>
        /// Type '10' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText = "10";
        
        /// <summary>
        /// Type '20' in 'Evaluate' button
        /// </summary>
        public string UIEvaluateButtonSendKeys = "20";
        
        /// <summary>
        /// Type '20' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText1 = "20";
        
        /// <summary>
        /// Type '30' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText2 = "30";
        
        /// <summary>
        /// Type '40' in 'Evaluate' button
        /// </summary>
        public string UIEvaluateButtonSendKeys1 = "40";
        
        /// <summary>
        /// Type '40' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText3 = "40";
        
        /// <summary>
        /// Type '=A1+B1+C1+D1' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText4 = "=A1+B1+C1+D1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'BoxCellValue' text box equals '100'
        /// </summary>
        public string UIBoxCellValueEditControlType = "100";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestingSaveMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class TestingSaveMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Ali Momeni\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spr" +
            "eadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spreadshe" +
            "etGUI.exe";
        
        /// <summary>
        /// Type '55' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText = "55";
        
        /// <summary>
        /// Select 'b' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "b";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestingCircularDependency'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class TestingCircularDependencyParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Ali Momeni\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spr" +
            "eadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spreadshe" +
            "etGUI.exe";
        
        /// <summary>
        /// Type '=A4' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText = "=A4";
        
        /// <summary>
        /// Type '=C4' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText1 = "=C4";
        
        /// <summary>
        /// Type '=B4' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText2 = "=B4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestingValueChange'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class TestingValueChangeParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Ali Momeni\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spr" +
            "eadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\CS 3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\CS 3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spreadshe" +
            "etGUI.exe";
        
        /// <summary>
        /// Type '=c5' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText = "=c5";
        
        /// <summary>
        /// Type '=F5' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText1 = "=F5";
        
        /// <summary>
        /// Type '5' in 'BoxCellContent' text box
        /// </summary>
        public string UIBoxCellContentEditText2 = "5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'BoxCellValue' text box equals '5'
        /// </summary>
        public string UIBoxCellValueEditControlType = "5";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UISpreadsheetWindow : WinWindow
    {
        
        public UISpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIBoxCellContentWindow UIBoxCellContentWindow
        {
            get
            {
                if ((this.mUIBoxCellContentWindow == null))
                {
                    this.mUIBoxCellContentWindow = new UIBoxCellContentWindow(this);
                }
                return this.mUIBoxCellContentWindow;
            }
        }
        
        public UIEvaluateWindow UIEvaluateWindow
        {
            get
            {
                if ((this.mUIEvaluateWindow == null))
                {
                    this.mUIEvaluateWindow = new UIEvaluateWindow(this);
                }
                return this.mUIEvaluateWindow;
            }
        }
        
        public UISpreadsheetClient UISpreadsheetClient
        {
            get
            {
                if ((this.mUISpreadsheetClient == null))
                {
                    this.mUISpreadsheetClient = new UISpreadsheetClient(this);
                }
                return this.mUISpreadsheetClient;
            }
        }
        
        public UISpreadsheetTitleBar UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new UISpreadsheetTitleBar(this);
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIMenuStrip1Window UIMenuStrip1Window
        {
            get
            {
                if ((this.mUIMenuStrip1Window == null))
                {
                    this.mUIMenuStrip1Window = new UIMenuStrip1Window(this);
                }
                return this.mUIMenuStrip1Window;
            }
        }
        
        public UIBoxCellValueWindow UIBoxCellValueWindow
        {
            get
            {
                if ((this.mUIBoxCellValueWindow == null))
                {
                    this.mUIBoxCellValueWindow = new UIBoxCellValueWindow(this);
                }
                return this.mUIBoxCellValueWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIBoxCellContentWindow mUIBoxCellContentWindow;
        
        private UIEvaluateWindow mUIEvaluateWindow;
        
        private UISpreadsheetClient mUISpreadsheetClient;
        
        private UISpreadsheetTitleBar mUISpreadsheetTitleBar;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UIMenuStrip1Window mUIMenuStrip1Window;
        
        private UIBoxCellValueWindow mUIBoxCellValueWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIBoxCellContentWindow : WinWindow
    {
        
        public UIBoxCellContentWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "BoxCellContent";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIBoxCellContentEdit
        {
            get
            {
                if ((this.mUIBoxCellContentEdit == null))
                {
                    this.mUIBoxCellContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIBoxCellContentEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIBoxCellContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIBoxCellContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIEvaluateWindow : WinWindow
    {
        
        public UIEvaluateWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Evaluate";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UIEvaluateButton
        {
            get
            {
                if ((this.mUIEvaluateButton == null))
                {
                    this.mUIEvaluateButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIEvaluateButton.SearchProperties[WinButton.PropertyNames.Name] = "Evaluate";
                    this.mUIEvaluateButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIEvaluateButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIEvaluateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UISpreadsheetClient : WinClient
    {
        
        public UISpreadsheetClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Spreadsheet";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinWindow UIBoxCellContentWindow
        {
            get
            {
                if ((this.mUIBoxCellContentWindow == null))
                {
                    this.mUIBoxCellContentWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIBoxCellContentWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUIBoxCellContentWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
                    this.mUIBoxCellContentWindow.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIBoxCellContentWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIBoxCellContentWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UISpreadsheetTitleBar : WinTitleBar
    {
        
        public UISpreadsheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
                    this.mUIHelpMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIHelpMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIHelpMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUIHelpMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIMenuStrip1Window : WinWindow
    {
        
        public UIMenuStrip1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIMenuStrip1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
                    this.mUIMenuStrip1MenuBar.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIBoxCellValueWindow : WinWindow
    {
        
        public UIBoxCellValueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "BoxCellValue";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIBoxCellValueEdit
        {
            get
            {
                if ((this.mUIBoxCellValueEdit == null))
                {
                    this.mUIBoxCellValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIBoxCellValueEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Value";
                    this.mUIBoxCellValueEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIBoxCellValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIBoxCellValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIWarningWindow : WinWindow
    {
        
        public UIWarningWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Warning");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UISpreadsheetWindow1 : WinWindow
    {
        
        public UISpreadsheetWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UISpreadsheetTitleBar1 UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new UISpreadsheetTitleBar1(this);
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        
        private UISpreadsheetTitleBar1 mUISpreadsheetTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UISpreadsheetTitleBar1 : WinTitleBar
    {
        
        public UISpreadsheetTitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UISpreadsheetWindow2 : WinWindow
    {
        
        public UISpreadsheetWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "3";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar2 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar2(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UISpreadsheetTitleBar2 UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new UISpreadsheetTitleBar2(this);
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar2 mUIMenuStrip1MenuBar;
        
        private UISpreadsheetTitleBar2 mUISpreadsheetTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIMenuStrip1MenuBar2 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem2 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem2(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem2 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIFileMenuItem2 : WinMenuItem
    {
        
        public UIFileMenuItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UISpreadsheetTitleBar2 : WinTitleBar
    {
        
        public UISpreadsheetTitleBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UISpreadsheetWindow3 : WinWindow
    {
        
        public UISpreadsheetWindow3()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "4";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar3 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar3(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UISpreadsheetTitleBar3 UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new UISpreadsheetTitleBar3(this);
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar3 mUIMenuStrip1MenuBar;
        
        private UISpreadsheetTitleBar3 mUISpreadsheetTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIMenuStrip1MenuBar3 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem3 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem3(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem3 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIFileMenuItem3 : WinMenuItem
    {
        
        public UIFileMenuItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UISpreadsheetTitleBar3 : WinTitleBar
    {
        
        public UISpreadsheetTitleBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIHelpWindow : WinWindow
    {
        
        public UIHelpWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Help";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Help");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItem0penWindow : WinWindow
    {
        
        public UIItem0penWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "0pen";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("0pen");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("0pen");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UITreeViewTree : WinTree
    {
        
        public UITreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("0pen");
            #endregion
        }
        
        #region Properties
        public UIFavoritesTreeItem UIFavoritesTreeItem
        {
            get
            {
                if ((this.mUIFavoritesTreeItem == null))
                {
                    this.mUIFavoritesTreeItem = new UIFavoritesTreeItem(this);
                }
                return this.mUIFavoritesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFavoritesTreeItem mUIFavoritesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIFavoritesTreeItem : WinTreeItem
    {
        
        public UIFavoritesTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Favorites";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("0pen");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDesktopTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopTreeItem.SearchProperties["Value"] = "1";
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDesktopTreeItem.WindowTitles.Add("0pen");
                    #endregion
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("0pen");
            #endregion
        }
        
        #region Properties
        public UIItemsViewList UIItemsViewList
        {
            get
            {
                if ((this.mUIItemsViewList == null))
                {
                    this.mUIItemsViewList = new UIItemsViewList(this);
                }
                return this.mUIItemsViewList;
            }
        }
        
        public UIBBListItem UIBBListItem
        {
            get
            {
                if ((this.mUIBBListItem == null))
                {
                    this.mUIBBListItem = new UIBBListItem(this);
                }
                return this.mUIBBListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIItemsViewList mUIItemsViewList;
        
        private UIBBListItem mUIBBListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemsViewList : WinList
    {
        
        public UIItemsViewList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Items View";
            this.WindowTitles.Add("0pen");
            #endregion
        }
        
        #region Properties
        public WinListItem UIBlaListItem
        {
            get
            {
                if ((this.mUIBlaListItem == null))
                {
                    this.mUIBlaListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIBlaListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Bla";
                    this.mUIBlaListItem.WindowTitles.Add("0pen");
                    #endregion
                }
                return this.mUIBlaListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIBlaListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIBBListItem : WinListItem
    {
        
        public UIBBListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "bb";
            this.WindowTitles.Add("0pen");
            #endregion
        }
        
        #region Properties
        public WinEdit UITypeEdit
        {
            get
            {
                if ((this.mUITypeEdit == null))
                {
                    this.mUITypeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITypeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Type";
                    this.mUITypeEdit.WindowTitles.Add("0pen");
                    #endregion
                }
                return this.mUITypeEdit;
            }
        }
        
        public WinEdit UISizeEdit
        {
            get
            {
                if ((this.mUISizeEdit == null))
                {
                    this.mUISizeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUISizeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Size";
                    this.mUISizeEdit.WindowTitles.Add("0pen");
                    #endregion
                }
                return this.mUISizeEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITypeEdit;
        
        private WinEdit mUISizeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("0pen");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("0pen");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UICUsersAliMomeniDesktWindow : WinWindow
    {
        
        public UICUsersAliMomeniDesktWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C:\\Users\\Ali Momeni\\Desktop\\Bla.ss";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("C:\\Users\\Ali Momeni\\Desktop\\Bla.ss");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar4 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar4(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UICUsersAliMomeniDesktTitleBar UICUsersAliMomeniDesktTitleBar
        {
            get
            {
                if ((this.mUICUsersAliMomeniDesktTitleBar == null))
                {
                    this.mUICUsersAliMomeniDesktTitleBar = new UICUsersAliMomeniDesktTitleBar(this);
                }
                return this.mUICUsersAliMomeniDesktTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar4 mUIMenuStrip1MenuBar;
        
        private UICUsersAliMomeniDesktTitleBar mUICUsersAliMomeniDesktTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIMenuStrip1MenuBar4 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("C:\\Users\\Ali Momeni\\Desktop\\Bla.ss");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem4 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem4(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem4 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIFileMenuItem4 : WinMenuItem
    {
        
        public UIFileMenuItem4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("C:\\Users\\Ali Momeni\\Desktop\\Bla.ss");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("C:\\Users\\Ali Momeni\\Desktop\\Bla.ss");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("C:\\Users\\Ali Momeni\\Desktop\\Bla.ss");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UICUsersAliMomeniDesktTitleBar : WinTitleBar
    {
        
        public UICUsersAliMomeniDesktTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("C:\\Users\\Ali Momeni\\Desktop\\Bla.ss");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("C:\\Users\\Ali Momeni\\Desktop\\Bla.ss");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UICUsersAliMomeniDesktWindow1 : WinWindow
    {
        
        public UICUsersAliMomeniDesktWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C:\\Users\\Ali Momeni\\Desktop\\bb.ss";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("C:\\Users\\Ali Momeni\\Desktop\\bb.ss");
            #endregion
        }
        
        #region Properties
        public UICUsersAliMomeniDesktTitleBar1 UICUsersAliMomeniDesktTitleBar
        {
            get
            {
                if ((this.mUICUsersAliMomeniDesktTitleBar == null))
                {
                    this.mUICUsersAliMomeniDesktTitleBar = new UICUsersAliMomeniDesktTitleBar1(this);
                }
                return this.mUICUsersAliMomeniDesktTitleBar;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICUsersAliMomeniDesktTitleBar1 mUICUsersAliMomeniDesktTitleBar;
        
        private UIItemWindow2 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UICUsersAliMomeniDesktTitleBar1 : WinTitleBar
    {
        
        public UICUsersAliMomeniDesktTitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("C:\\Users\\Ali Momeni\\Desktop\\bb.ss");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("C:\\Users\\Ali Momeni\\Desktop\\bb.ss");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("C:\\Users\\Ali Momeni\\Desktop\\bb.ss");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("C:\\Users\\Ali Momeni\\Desktop\\bb.ss");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIFolderViewWindow UIFolderViewWindow
        {
            get
            {
                if ((this.mUIFolderViewWindow == null))
                {
                    this.mUIFolderViewWindow = new UIFolderViewWindow(this);
                }
                return this.mUIFolderViewWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIFolderViewWindow mUIFolderViewWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIFolderViewWindow : WinWindow
    {
        
        public UIFolderViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            #endregion
        }
        
        #region Properties
        public WinList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new WinList(this);
                }
                return this.mUIItemList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIAnErroroccuredbecausWindow : WinWindow
    {
        
        public UIAnErroroccuredbecausWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "An Error occured because your data entry causes a Circular Dependency";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("An Error occured because your data entry causes a Circular Dependency");
            #endregion
        }
        
        #region Properties
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow1 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("An Error occured because your data entry causes a Circular Dependency");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("An Error occured because your data entry causes a Circular Dependency");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow1 UISaveWindow1
        {
            get
            {
                if ((this.mUISaveWindow1 == null))
                {
                    this.mUISaveWindow1 = new UISaveWindow1(this);
                }
                return this.mUISaveWindow1;
            }
        }
        
        public UITreeViewWindow1 UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow1(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow1 mUISaveWindow1;
        
        private UITreeViewWindow1 mUITreeViewWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UISaveWindow1 : WinWindow
    {
        
        public UISaveWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UITreeViewWindow1 : WinWindow
    {
        
        public UITreeViewWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree1 UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree1(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree1 mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UITreeViewTree1 : WinTree
    {
        
        public UITreeViewTree1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public UIFavoritesTreeItem1 UIFavoritesTreeItem
        {
            get
            {
                if ((this.mUIFavoritesTreeItem == null))
                {
                    this.mUIFavoritesTreeItem = new UIFavoritesTreeItem1(this);
                }
                return this.mUIFavoritesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFavoritesTreeItem1 mUIFavoritesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIFavoritesTreeItem1 : WinTreeItem
    {
        
        public UIFavoritesTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Favorites";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDesktopTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopTreeItem.SearchProperties["Value"] = "1";
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDesktopTreeItem.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UISaveWindow11 : WinWindow
    {
        
        public UISaveWindow11()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public UISavePane UISavePane
        {
            get
            {
                if ((this.mUISavePane == null))
                {
                    this.mUISavePane = new UISavePane(this);
                }
                return this.mUISavePane;
            }
        }
        #endregion
        
        #region Fields
        private UISavePane mUISavePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UISavePane : WinPane
    {
        
        public UISavePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Save";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
}
